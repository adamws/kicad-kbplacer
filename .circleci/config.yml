version: 2.1

jobs:
  test-linux:
    parameters:
      version:
        type: string
    docker:
      - image: admwscki/kicad-kbplacer-primary:<<parameters.version>>
    steps: &in-docker-test-steps
      - checkout
      - run:
          name: Prepare tests
          command: |
            pip3 install --no-cache-dir -r dev-requirements.txt
      - run:
          name: Run tests
          command: |
            pytest --junitxml=test-results/pytest/results.xml tests/
      - run:
          name: Move coverage file
          command: |
            mv .coverage .coverage-<<parameters.version>>
      - persist_to_workspace:
          root: .
          paths:
            - .coverage-<<parameters.version>>
      - store_artifacts:
          path: report.html
      - store_test_results:
          path: test-results
  test-linux-performance:
    parameters:
      version:
        type: string
    docker:
      - image: admwscki/kicad-kbplacer-primary:<<parameters.version>>
    steps:
      - checkout
      - run:
          name: Prepare tests
          command: |
            pip3 install --no-cache-dir -r dev-requirements.txt
      - run:
          name: Run tests
          command: |
            pytest --junitxml=test-results/pytest/results.xml \
              -k "2x3-rotations-custom-diode and RAW and PRESET" \
              --no-cov --profile tests/
      - store_artifacts:
          path: report.html
      - store_test_results:
          path: test-results
  collect-coverage:
    docker:
      - image: cimg/python:3.11
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run:
          name: Install dependencies
          command: |
            python -m pip install coverage
      - run:
          name: Generate coverage report
          command: |
            python -m coverage combine /tmp/workspace/.coverage-*
            python -m coverage report
            python -m coverage html
      - when: # run only on master
          condition:
            equal: [ master, << pipeline.git.branch >> ]
          steps:
            - run:
                name: Publish coverage
                command: |
                  python -m pip install coveralls
                  python -m coveralls
      - store_artifacts:
          path: .coverage
      - store_artifacts:
          path: htmlcov
  run-absolem-example:
    machine:
      image: ubuntu-2204:2022.10.2
    steps:
      - checkout
      - run:
          name: Build absolem keyboard
          command: |
            cd examples/absolem-ergogen
            ./run.sh
            unzip absolem.zip
      - store_artifacts:
          path: examples/absolem-ergogen/absolem.svg
      - store_artifacts:
          path: examples/absolem-ergogen/absolem.zip
  test-windows:
    machine:
      image: windows-server-2022-gui:edge
      shell: powershell.exe -ExecutionPolicy Bypass
    resource_class: windows.medium
    parameters:
      kicad-version:
        type: string
    steps:
      - checkout
      - run:
          name: Install scoop and KiCad
          command: |
            irm get.scoop.sh -outfile "install.ps1"
            .\install.ps1 -RunAsAdmin -ScoopDir "C:\scoop"
            scoop bucket add extras
            scoop install kicad@<<parameters.kicad-version>>
            scoop cache rm --all
      - run:
          name: Install dependencies
          command: |
            .\.circleci\scripts\use-kicad-python.ps1
            python -m pip install --upgrade pip
            pip install --no-cache-dir -r dev-requirements.txt
      - run:
          name: Run tests
          command: |
            .\.circleci\scripts\use-kicad-python.ps1
            pytest --junitxml=test-results/pytest/results.xml tests
      - store_artifacts:
          path: report.html
      - store_test_results:
          path: test-results
  test-macos:
    macos:
      xcode: 15.3
    environment:
      HOMEBREW_NO_AUTO_UPDATE: 1
    parameters:
      kicad-version:
        type: string
    steps:
      - checkout
      - run:
          name: Install KiCad
          command: |
            if [ "<<parameters.kicad-version>>" = "6.0.11" ]; then
              revision=fe3bee625b41005d37bbce2ef48d921f9826298e
              filepath=Casks/kicad.rb
            elif [ "<<parameters.kicad-version>>" = "7.0.11" ]; then
              revision=a7e1cdb4e1343b253270fd97f3fcf2ae884428b3
              filepath=Casks/k/kicad.rb
            elif [ "<<parameters.kicad-version>>" = "8.0.1" ]; then
              revision=c7ee7731a967c3728e1034e00461a562c6882f78
              filepath=Casks/k/kicad.rb
            elif [ "<<parameters.kicad-version>>" = "8.0.2" ]; then
              revision=9adad0fea42cff3217bffc0589afa03f497299f5
              filepath=Casks/k/kicad.rb
            elif [ "<<parameters.kicad-version>>" = "8.0.3" ]; then
              revision=d5e707138d98f4e02221c1fdcf4cc887970c962d
              filepath=Casks/k/kicad.rb
            elif [ "<<parameters.kicad-version>>" = "8.0.4" ]; then
              revision=ced7b59ba78c908ee102ce8ea98387d4a116bef8
              filepath=Casks/k/kicad.rb
            else
              echo "Unsupported KiCad version!"
            fi
            brew install --cask https://raw.githubusercontent.com/Homebrew/homebrew-cask/$revision/$filepath
      - run:
          name: Install dependencies
          command: |
            source .circleci/scripts/use-kicad-python-macos.sh
            pip install --no-cache-dir -r dev-requirements.txt
      - run:
          name: Run tests
          command: |
            source .circleci/scripts/use-kicad-python-macos.sh
            pytest --junitxml=test-results/pytest/results.xml tests
      - store_artifacts:
          path: report.html
      - store_test_results:
          path: test-results

  create-pcm-package:
    docker:
      - image: cimg/python:3.11
    steps:
      - checkout
      - run:
          name: Setup environment variables
          command: |
            if [ -z "$CIRCLE_TAG" ]; then
              echo "Building development package"
            else
              echo "Building release package"
              echo "export KBPLACER_KICAD_STATUS=stable" >> $BASH_ENV
              echo "export KBPLACER_KICAD_RELEASE_URL=https://github.com/adamws/kicad-kbplacer/releases/download/v{version}/{zip_name}" >> $BASH_ENV
            fi
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update && sudo apt-get install -y gettext
            python -m pip install --upgrade hatch
      - run:
          name: Create zip package and repository
          environment:
            HATCH_BUILD_HOOK_ENABLE_KICAD-REPOSITORY: true
          command: |
            python -m hatch build --target kicad-package
      - store_artifacts:
          path: dist/repository
      - persist_to_workspace:
          root: .
          paths:
            - dist/repository/*
      - when: # run only on master
          condition:
            equal: [ master, << pipeline.git.branch >> ]
          steps:
            - add_ssh_keys:
                fingerprints:
                  - "d0:4f:c2:dd:e2:fe:9c:25:33:57:3e:fd:09:bd:9e:5c"
            - run:
                name: Deploy repository to github pages
                command: |
                  ./release/deploy.sh
  create-pypi-package:
    docker:
      - image: cimg/python:3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            pip install hatch==1.7.0
      - run:
          name: Create distribution archive
          command: |
            python -m hatch -v build -t sdist
      - run:
          name: Sanity check result package
          command: |
            python -m venv .env
            . .env/bin/activate
            pip install dist/kbplacer*.tar.gz
            python -c 'from kbplacer.kle_serial import parse_kle; print(parse_kle([["",""]]))'
      - store_artifacts:
          path: dist
      - persist_to_workspace:
          root: .
          paths:
            - dist/kbplacer*.tar.gz
  create-github-release:
    docker:
      - image: cimg/base:2023.12
    steps:
      - attach_workspace:
          at: /tmp
      - checkout
      - run:
          name: Install dependencies
          command: |
            ./release/install_gh.sh
      - run:
          name: Create draft release
          command: |
            if [ -z "$CIRCLE_TAG" ]; then exit 1; fi
            gh config set prompt disabled
            gh release create $CIRCLE_TAG --prerelease --verify-tag --title $CIRCLE_TAG
      - run:
          name: Upload artifacts to release
          command: |
            NAME=kbplacer-$(echo $CIRCLE_TAG | cut -c 2-)
            gh release upload $CIRCLE_TAG \
              /tmp/dist/$NAME.tar.gz \
              /tmp/dist/repository/$NAME.zip \
              /tmp/dist/repository/packages.json \
              /tmp/dist/repository/repository.json \
              /tmp/dist/repository/resources.zip
  deploy-image:
    machine:
      image: ubuntu-2204:2022.10.2
    steps:
      - checkout
      - run:
          name: Setup environment variables
          command: |
            if [ -z "$CIRCLE_TAG" ]; then
              # when not tag, get minor version number from previous tag,
              # i.e 0.8-2-gb884521 -> 8 and increment by one. This is current
              # (next to be relased) version. Assuming that we only increment minor
              # and major stays 0.
              PREVIOUS_MINOR=$(git describe | awk -F- '{print $1}' | cut -c 4-)
              CURRENT_MINOR=$((PREVIOUS_MINOR + 1))
              echo "export TAG=0.$CURRENT_MINOR-circleci" >> $BASH_ENV
            else
              # tag branch, cut 'v' prefix (only v prefixed tags should trigger this job)
              echo "export TAG=$(echo $CIRCLE_TAG | cut -c 2-)" >> $BASH_ENV
            fi
            echo "export IMAGE_NAME=kicad-kbplacer" >> $BASH_ENV
      - run:
          name: Build and test docker image
          command: |
            docker build -t admwscki/$IMAGE_NAME:$TAG -f docker/Dockerfile .
            docker run --rm -v $(pwd):/kicad/tmp -w /kicad/tmp admwscki/$IMAGE_NAME:$TAG \
              /bin/bash -c \
              "python -m pip install -r dev-requirements.txt && python -m pytest -c /dev/null --test-plugin-installation --continue-on-collection-errors -k test_with_examples"
      - when: # run only on master or tag
          condition:
            or:
              - << pipeline.git.tag >>
              - equal: [ master, << pipeline.git.branch >> ]
          steps:
            - run:
                name: Push docker image
                command: |
                  docker tag admwscki/$IMAGE_NAME:$TAG admwscki/$IMAGE_NAME:latest
                  echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_LOGIN --password-stdin
                  docker push admwscki/$IMAGE_NAME:$TAG
                  docker push admwscki/$IMAGE_NAME:latest
  build-nightly-image:
    machine:
      image: ubuntu-2204:2022.10.2
    steps:
      - checkout
      - run:
          name: Build and push KiCad nightly docker image
          command: |
            docker build -t admwscki/kicad-kbplacer-primary:nightly-jammy -f nightly.Dockerfile .
            echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_LOGIN --password-stdin
            docker push admwscki/kicad-kbplacer-primary:nightly-jammy
          working_directory: .circleci/images/jammy
  test-linux-kicad-nightly:
    parameters:
      version:
        type: string
    docker:
      - image: admwscki/kicad-kbplacer-primary:<<parameters.version>>
    steps: *in-docker-test-steps

workflows:
  main:
    jobs:
      - test-linux:
          matrix:
            parameters:
              version:
                - 6.0.11-focal
                - 6.0.11-lunar
                - 7.0.6-focal
                - 7.0.6-lunar
                - 7.0.11-focal
                - 7.0.11-mantic
                - 8.0.4-focal
                - 8.0.4-jammy
      - test-linux-performance:
          matrix:
            parameters:
              version:
                - 8.0.4-jammy
      - collect-coverage:
          requires:
            - test-linux
      - run-absolem-example:
          requires:
            - test-linux
      - test-windows:
          matrix:
            parameters:
              kicad-version:
                - 6.0.11
                - 7.0.11
                - 8.0.4
      - test-macos:
          matrix:
            parameters:
              kicad-version:
                - 7.0.11
                - 8.0.4
      - create-pcm-package:
          requires: &required-tests
            - test-linux
            - test-windows
            - test-macos
      - create-pypi-package:
          requires: *required-tests
      - deploy-image:
          requires:
            - create-pcm-package
  kicad-release:
    jobs:
      - create-pcm-package:
          filters: &tag-filter
            tags:
              only: /^v[0-9]+(\.[0-9]+)*$/
            branches:
              ignore: /.*/
      - create-pypi-package:
          filters: *tag-filter
      - create-github-release:
          filters: *tag-filter
          requires:
            - create-pcm-package
            - create-pypi-package
      - deploy-image:
          filters: *tag-filter
          requires:
            - create-pcm-package
            - create-pypi-package
  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - kicad-nightly
    jobs:
      - build-nightly-image
      - test-linux-kicad-nightly:
          version: nightly-jammy
          requires:
            - build-nightly-image
